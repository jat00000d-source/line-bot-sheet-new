require('dotenv').config();
const express = require('express');
const line = require('@line/bot-sdk');
const cron = require('node-cron');
const moment = require('moment-timezone');

// Ë®≠ÂÆöÈ†êË®≠ÊôÇÂçÄÁÇ∫Êó•Êú¨ÊôÇÈñì
moment.tz.setDefault('Asia/Tokyo');

// Ê™¢Êü•ÂøÖË¶ÅÁöÑÁí∞Â¢ÉËÆäÊï∏
function validateEnvironment() {
  const required = ['CHANNEL_ACCESS_TOKEN', 'CHANNEL_SECRET'];
  const missing = required.filter(key => !process.env[key]);
  
  if (missing.length > 0) {
    console.error('‚ùå Áº∫Â∞ëÂøÖË¶ÅÁöÑÁí∞Â¢ÉËÆäÊï∏:', missing.join(', '));
    process.exit(1);
  }
}

// Âü∫Êú¨ÁöÑ Controller È°ûÂà• (Â¶ÇÊûúÂ§ñÈÉ®Ê™îÊ°àÁÑ°Ê≥ïËºâÂÖ•)
class BasicExpenseController {
  constructor() {
    this.expenses = [];
  }

  async handleExpense(event, command) {
    try {
      // Âü∫Êú¨Ë®òÂ∏≥ÈÇèËºØ
      const expense = {
        id: Date.now(),
        category: command.category || 'ÂÖ∂‰ªñ',
        amount: command.amount || 0,
        description: command.description || '',
        date: moment().tz('Asia/Tokyo').format('YYYY-MM-DD HH:mm:ss'),
        userId: event.source.userId
      };
      
      this.expenses.push(expense);
      
      return {
        type: 'text',
        text: `‚úÖ Â∑≤Ë®òÈåÑÊîØÂá∫\nÈ°ûÂà•: ${expense.category}\nÈáëÈ°ç: ${expense.amount}ÂÖÉ\nË™™Êòé: ${expense.description}`
      };
    } catch (error) {
      console.error('Ë®òÂ∏≥ËôïÁêÜÈåØË™§:', error);
      return {
        type: 'text',
        text: 'Ë®òÂ∏≥ËôïÁêÜÊôÇÁôºÁîüÈåØË™§ÔºåË´ãÁ®çÂæåÂÜçË©¶„ÄÇ'
      };
    }
  }

  async handleExpenseQuery(event, command, language) {
    try {
      const userExpenses = this.expenses.filter(exp => exp.userId === event.source.userId);
      const total = userExpenses.reduce((sum, exp) => sum + exp.amount, 0);
      
      const message = language === 'ja' ? 
        `üìä ÊîØÂá∫Áµ±Ë®à\nÁ∏ΩË®à: ${total}ÂÜÜ\nË®òÈåÑÊï∏: ${userExpenses.length}‰ª∂` :
        `üìä ÊîØÂá∫Áµ±Ë®à\nÁ∏ΩË®à: ${total}ÂÖÉ\nË®òÈåÑÊï∏: ${userExpenses.length}Á≠Ü`;
      
      return {
        type: 'text',
        text: message
      };
    } catch (error) {
      console.error('Êü•Ë©¢ÊîØÂá∫ÈåØË™§:', error);
      return {
        type: 'text',
        text: 'Êü•Ë©¢ÊîØÂá∫ÊôÇÁôºÁîüÈåØË™§„ÄÇ'
      };
    }
  }
}

class BasicTodoController {
  constructor() {
    this.reminders = [];
  }

  async handleTodo(event, command, language) {
    try {
      const reminder = {
        id: Date.now(),
        userId: event.source.userId,
        text: command.text || 'ÊèêÈÜí',
        time: command.time || moment().add(1, 'hour').format('YYYY-MM-DD HH:mm'),
        recurring: command.recurring || false,
        active: true
      };
      
      this.reminders.push(reminder);
      
      const message = language === 'ja' ? 
        `‚è∞ „É™„Éû„Ç§„É≥„ÉÄ„Éº„ÇíË®≠ÂÆö„Åó„Åæ„Åó„Åü\nÂÜÖÂÆπ: ${reminder.text}\nÊôÇÈñì: ${reminder.time}` :
        `‚è∞ Â∑≤Ë®≠ÂÆöÊèêÈÜí\nÂÖßÂÆπ: ${reminder.text}\nÊôÇÈñì: ${reminder.time}`;
      
      return {
        type: 'text',
        text: message
      };
    } catch (error) {
      console.error('ÊèêÈÜíËôïÁêÜÈåØË™§:', error);
      return {
        type: 'text',
        text: 'Ë®≠ÂÆöÊèêÈÜíÊôÇÁôºÁîüÈåØË™§„ÄÇ'
      };
    }
  }

  async handleQueryReminders(event, language) {
    try {
      const userReminders = this.reminders.filter(r => r.userId === event.source.userId && r.active);
      
      if (userReminders.length === 0) {
        const message = language === 'ja' ? '„É™„Éû„Ç§„É≥„ÉÄ„Éº„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ' : 'ÁõÆÂâçÊ≤íÊúâÊèêÈÜí‰∫ãÈ†Ö„ÄÇ';
        return {
          type: 'text',
          text: message
        };
      }
      
      const reminderList = userReminders.map((r, index) => `${index + 1}. ${r.text} - ${r.time}`).join('\n');
      const message = language === 'ja' ? 
        `üìã „É™„Éû„Ç§„É≥„ÉÄ„Éº‰∏ÄË¶ß:\n${reminderList}` :
        `üìã ÊèêÈÜíÂàóË°®:\n${reminderList}`;
      
      return {
        type: 'text',
        text: message
      };
    } catch (error) {
      console.error('Êü•Ë©¢ÊèêÈÜíÈåØË™§:', error);
      return {
        type: 'text',
        text: 'Êü•Ë©¢ÊèêÈÜíÊôÇÁôºÁîüÈåØË™§„ÄÇ'
      };
    }
  }

  async handleDeleteReminder(event, command, language) {
    try {
      const index = parseInt(command.index) - 1;
      const userReminders = this.reminders.filter(r => r.userId === event.source.userId && r.active);
      
      if (index >= 0 && index < userReminders.length) {
        userReminders[index].active = false;
        const message = language === 'ja' ? 
          '„É™„Éû„Ç§„É≥„ÉÄ„Éº„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü„ÄÇ' :
          'Â∑≤Âà™Èô§ÊèêÈÜí„ÄÇ';
        
        return {
          type: 'text',
          text: message
        };
      } else {
        const message = language === 'ja' ? 
          'ÊåáÂÆö„Åï„Çå„Åü„É™„Éû„Ç§„É≥„ÉÄ„Éº„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ' :
          'Êâæ‰∏çÂà∞ÊåáÂÆöÁöÑÊèêÈÜí„ÄÇ';
        
        return {
          type: 'text',
          text: message
        };
      }
    } catch (error) {
      console.error('Âà™Èô§ÊèêÈÜíÈåØË™§:', error);
      return {
        type: 'text',
        text: 'Âà™Èô§ÊèêÈÜíÊôÇÁôºÁîüÈåØË™§„ÄÇ'
      };
    }
  }
}

// Âü∫Êú¨ÁöÑÂëΩ‰ª§Ëß£ÊûêÂô®
class BasicCommandParser {
  parseCommand(text, language = 'zh') {
    const lowerText = text.toLowerCase();
    
    // Ë®òÂ∏≥Áõ∏ÈóúÂëΩ‰ª§
    if (lowerText.includes('ÊîØÂá∫') || lowerText.includes('Êü•Áúã') || lowerText.includes('Áµ±Ë®à')) {
      return { type: 'query_expenses' };
    }
    
    // ÊèêÈÜíÁõ∏ÈóúÂëΩ‰ª§
    if (lowerText.includes('ÊèêÈÜí') || lowerText.includes('„É™„Éû„Ç§„É≥„ÉÄ„Éº')) {
      if (lowerText.includes('Êü•Áúã') || lowerText.includes('ÂàóË°®') || lowerText.includes('‰∏ÄË¶ß')) {
        return { type: 'query_reminders' };
      }
      if (lowerText.includes('Âà™Èô§') || lowerText.includes('ÂâäÈô§')) {
        const match = text.match(/(\d+)/);
        return { 
          type: 'delete_reminder',
          index: match ? match[1] : '1'
        };
      }
      return { 
        type: 'reminder',
        text: text,
        time: moment().add(1, 'hour').format('YYYY-MM-DD HH:mm')
      };
    }
    
    // Âü∫Êú¨Ë®òÂ∏≥ÂëΩ‰ª§ (ÂåÖÂê´Êï∏Â≠óÁöÑË®äÊÅØ)
    const amountMatch = text.match(/(\d+)/);
    if (amountMatch) {
      return {
        type: 'expense',
        amount: parseInt(amountMatch[1]),
        category: 'ÂÖ∂‰ªñ',
        description: text
      };
    }
    
    return { type: 'unknown' };
  }
}

class BasicLanguageDetector {
  detect(text) {
    // Á∞°ÂñÆÁöÑË™ûË®ÄÊ™¢Ê∏¨
    const japaneseChars = /[\u3040-\u309F\u30A0-\u30FF\u4E00-\u9FAF]/;
    return japaneseChars.test(text) ? 'ja' : 'zh';
  }
}

class LineBotApp {
  constructor() {
    this.app = express();
    this.port = process.env.PORT || 3000;
    
    // È©óË≠âÁí∞Â¢ÉËÆäÊï∏
    validateEnvironment();
    
    // LINE Bot ÈÖçÁΩÆ
    this.config = {
      channelAccessToken: process.env.CHANNEL_ACCESS_TOKEN,
      channelSecret: process.env.CHANNEL_SECRET,
    };
    
    this.client = new line.Client(this.config);
    
    // ÂàùÂßãÂåñÊéßÂà∂Âô®Ôºà‰ΩøÁî®Âü∫Êú¨ÁâàÊú¨ÔºåÈÅøÂÖçÂ§ñÈÉ®‰æùË≥¥ÂïèÈ°åÔºâ
    this.initializeControllers();
    
    this.setupMiddleware();
    this.setupRoutes();
    this.startScheduler();
  }

  initializeControllers() {
    try {
      // ÂòóË©¶ËºâÂÖ•Â§ñÈÉ®ÊéßÂà∂Âô®
      const { ExpenseController, TodoController } = require('./controllers/expenseController');
      this.expenseController = new ExpenseController();
      this.todoController = new TodoController();
      
      // ÂàùÂßãÂåñÊúçÂãô
      try {
        const ReminderScheduler = require('./services/reminderScheduler');
        const NotificationService = require('./services/notificationService');
        
        this.reminderScheduler = new ReminderScheduler(this.client);
        this.notificationService = new NotificationService(this.client);
        
        // ËÆì ReminderScheduler ÂèØ‰ª•Â≠òÂèñÊèêÈÜíË≥áÊñô
        this.reminderScheduler.setReminders(this.todoController.reminders);
        console.log('‚úÖ ÊàêÂäüËºâÂÖ•ÊúçÂãôÊ®°ÁµÑ');
      } catch (serviceError) {
        console.log('‚ö†Ô∏è ÊúçÂãôÊ®°ÁµÑËºâÂÖ•Â§±Êïó:', serviceError.message);
      }
      
      console.log('‚úÖ ÊàêÂäüËºâÂÖ•Â§ñÈÉ®ÊéßÂà∂Âô®');
    } catch (error) {
      // Â¶ÇÊûúÂ§ñÈÉ®ÊéßÂà∂Âô®ËºâÂÖ•Â§±ÊïóÔºå‰ΩøÁî®Âü∫Êú¨ÁâàÊú¨
      console.log('‚ö†Ô∏è Â§ñÈÉ®ÊéßÂà∂Âô®ËºâÂÖ•Â§±ÊïóÔºå‰ΩøÁî®Âü∫Êú¨ÁâàÊú¨:', error.message);
      this.expenseController = new BasicExpenseController();
      this.todoController = new BasicTodoController();
    }
    
    try {
      // ÂòóË©¶ËºâÂÖ•Â§ñÈÉ®Â∑•ÂÖ∑È°û
      const { CommandParser, LanguageDetector } = require('./utils/commandParser');
      this.commandParser = new CommandParser();
      this.languageDetector = new LanguageDetector();
      console.log('‚úÖ ÊàêÂäüËºâÂÖ•Â§ñÈÉ®Â∑•ÂÖ∑È°û');
    } catch (error) {
      // Â¶ÇÊûúÂ§ñÈÉ®Â∑•ÂÖ∑È°ûËºâÂÖ•Â§±ÊïóÔºå‰ΩøÁî®Âü∫Êú¨ÁâàÊú¨
      console.log('‚ö†Ô∏è Â§ñÈÉ®Â∑•ÂÖ∑È°ûËºâÂÖ•Â§±ÊïóÔºå‰ΩøÁî®Âü∫Êú¨ÁâàÊú¨:', error.message);
      this.commandParser = new BasicCommandParser();
      this.languageDetector = new BasicLanguageDetector();
    }
  }

  setupMiddleware() {
    this.app.use(express.json());
    this.app.use(express.urlencoded({ extended: true }));
    
    // Ë´ãÊ±ÇË®òÈåÑ‰∏≠‰ªãËªüÈ´î
    this.app.use((req, res, next) => {
      const now = moment().tz('Asia/Tokyo');
      console.log(`üìù [${now.format('YYYY-MM-DD HH:mm:ss JST')}] ${req.method} ${req.path}`);
      next();
    });
    
    // ÈåØË™§ËôïÁêÜ‰∏≠‰ªãËªüÈ´î
    this.app.use((err, req, res, next) => {
      console.error('‚ùå ‰∏≠‰ªãËªüÈ´îÈåØË™§:', err);
      res.status(500).json({ error: 'Internal Server Error' });
    });
    
    // ÂÅ•Â∫∑Ê™¢Êü•Á´ØÈªû
    this.app.get('/health', (req, res) => {
      const now = moment().tz('Asia/Tokyo');
      
      res.status(200).json({ 
        status: 'OK', 
        timestamp: now.toISOString(),
        localTime: now.format('YYYY-MM-DD HH:mm:ss JST'),
        timezone: 'Asia/Tokyo',
        services: {
          'expense-tracking': '‚úÖ ÈÅãË°å‰∏≠ (Ë®òÊÜ∂È´îÂÑ≤Â≠ò)',
          'reminders': '‚úÖ ÈÅãË°å‰∏≠'
        },
        environment: process.env.NODE_ENV || 'development'
      });
    });

    // Ê†πÁõÆÈåÑÁ´ØÈªû
    this.app.get('/', (req, res) => {
      res.status(200).json({
        message: 'LINE Bot Ë®òÂ∏≥ÊèêÈÜíÁ≥ªÁµ±',
        status: 'Running',
        timezone: 'JST (UTC+9)',
        features: ['Ë®òÂ∏≥ÂäüËÉΩ', 'ÊèêÈÜíÂäüËÉΩ', 'Â§öË™ûË®ÄÊîØÊè¥ (ÁπÅÈ´î‰∏≠Êñá/Êó•Ë™û)']
      });
    });
  }

  setupRoutes() {
    // Ê∏¨Ë©¶Â∞àÁî®ÁöÑ Webhook Á´ØÈªûÔºà‰∏çÈúÄË¶ÅÈ©óË≠âÔºâ
    this.app.post('/webhook-test', async (req, res) => {
      console.log('üß™ Ê∏¨Ë©¶ Webhook Á´ØÈªûË¢´Ë™øÁî®');
      console.log('Ë´ãÊ±ÇÊ®ôÈ†≠:', req.headers);
      console.log('Ë´ãÊ±ÇÂÖßÂÆπ:', JSON.stringify(req.body, null, 2));
      
      res.status(200).json({ 
        message: 'Test webhook OK',
        timestamp: moment().tz('Asia/Tokyo').format('YYYY-MM-DD HH:mm:ss JST')
      });
    });

    // LINE Webhook
    this.app.post('/webhook', async (req, res) => {
      try {
        console.log('üì® Êî∂Âà∞ Webhook Ë´ãÊ±Ç');
        console.log('Ë´ãÊ±ÇÊ®ôÈ†≠:', JSON.stringify(req.headers, null, 2));
        console.log('Ë´ãÊ±ÇÂÖßÂÆπ:', JSON.stringify(req.body, null, 2));
        
        // ÂÖàÂõûÊáâ 200 ÁãÄÊÖãÁ¢ºÔºåÈÅøÂÖçË∂ÖÊôÇ
        res.status(200).json({ message: 'OK' });
        
        if (!req.body || !req.body.events) {
          console.log('‚ö†Ô∏è ÁÑ°ÊïàÁöÑË´ãÊ±ÇÂÖßÂÆπ');
          return;
        }

        // Áï∞Ê≠•ËôïÁêÜ‰∫ã‰ª∂ÔºåÈÅøÂÖçÈòªÂ°ûÂõûÊáâ
        setImmediate(async () => {
          try {
            const results = await Promise.allSettled(
              req.body.events.map(event => this.handleEvent(event))
            );
            
            // Ê™¢Êü•ÊòØÂê¶ÊúâÂ§±ÊïóÁöÑ‰∫ã‰ª∂ËôïÁêÜ
            const failed = results.filter(r => r.status === 'rejected');
            if (failed.length > 0) {
              console.error('‚ùå ÈÉ®ÂàÜ‰∫ã‰ª∂ËôïÁêÜÂ§±Êïó:', failed.map(f => f.reason));
            }
            
            console.log('‚úÖ Webhook ËôïÁêÜÂÆåÊàê:', results.length, 'ÂÄã‰∫ã‰ª∂');
          } catch (asyncErr) {
            console.error('‚ùå Áï∞Ê≠•‰∫ã‰ª∂ËôïÁêÜÈåØË™§:', asyncErr);
          }
        });
        
      } catch (err) {
        console.error('‚ùå Webhook ÈåØË™§:', err);
        console.error('ÈåØË™§Â†ÜÁñä:', err.stack);
        
        if (!res.headersSent) {
          res.status(200).json({ message: 'Error handled' });
        }
      }
    });

    // Ê∏¨Ë©¶Á´ØÈªû
    this.app.get('/test', (req, res) => {
      res.status(200).json({
        message: 'Ê∏¨Ë©¶Á´ØÈªûÊ≠£Â∏∏ÈÅã‰Ωú',
        timestamp: moment().tz('Asia/Tokyo').format('YYYY-MM-DD HH:mm:ss JST'),
        controllers: {
          expense: !!this.expenseController,
          todo: !!this.todoController,
          parser: !!this.commandParser,
          detector: !!this.languageDetector
        }
      });
    });

    // Ê®°Êì¨ LINE ‰∫ã‰ª∂ÁöÑÊ∏¨Ë©¶Á´ØÈªû
    this.app.post('/test-event', async (req, res) => {
      try {
        const testEvent = {
          type: 'message',
          message: {
            type: 'text',
            text: req.body.message || 'Ê∏¨Ë©¶Ë®äÊÅØ'
          },
          source: {
            userId: 'test-user-id'
          },
          replyToken: 'test-reply-token'
        };

        console.log('üß™ ËôïÁêÜÊ∏¨Ë©¶‰∫ã‰ª∂:', testEvent);
        
        const result = await this.handleEvent(testEvent);
        
        res.status(200).json({
          success: true,
          message: 'Ê∏¨Ë©¶‰∫ã‰ª∂ËôïÁêÜÂÆåÊàê',
          result: result,
          timestamp: moment().tz('Asia/Tokyo').format('YYYY-MM-DD HH:mm:ss JST')
        });
        
      } catch (error) {
        console.error('‚ùå Ê∏¨Ë©¶‰∫ã‰ª∂ËôïÁêÜÈåØË™§:', error);
        res.status(200).json({
          success: false,
          error: error.message,
          timestamp: moment().tz('Asia/Tokyo').format('YYYY-MM-DD HH:mm:ss JST')
        });
      }
    });
  }

  async handleEvent(event) {
    try {
      console.log('üéØ ËôïÁêÜ‰∫ã‰ª∂È°ûÂûã:', event.type);
      console.log('üéØ ÂÆåÊï¥‰∫ã‰ª∂ÂÖßÂÆπ:', JSON.stringify(event, null, 2));
      
      if (event.type !== 'message' || event.message.type !== 'text') {
        console.log('‚è≠Ô∏è Ë∑≥ÈÅéÈùûÊñáÂ≠óË®äÊÅØ‰∫ã‰ª∂');
        return null;
      }

      const userId = event.source.userId;
      const messageText = event.message.text.trim();
      
      console.log(`üë§ Áî®Êà∂ ID: ${userId}`);
      console.log(`üí¨ Ë®äÊÅØÂÖßÂÆπ: "${messageText}"`);
      
      // Ê™¢Ê∏¨Ë™ûË®Ä
      const language = this.languageDetector.detect(messageText);
      console.log(`üåê Ê™¢Ê∏¨Âà∞ÁöÑË™ûË®Ä: ${language}`);
      
      // Ëß£ÊûêÊåá‰ª§
      const command = this.commandParser.parseCommand(messageText, language);
      console.log(`üîß Ëß£ÊûêÁöÑÊåá‰ª§:`, JSON.stringify(command, null, 2));
      
      let response;
      
      // Ê†πÊìöÊåá‰ª§È°ûÂûãÂàÜÁôºÂà∞Â∞çÊáâÁöÑÊéßÂà∂Âô®
      switch (command.type) {
        case 'expense':
          console.log('üí∞ ËôïÁêÜË®òÂ∏≥Êåá‰ª§');
          response = await this.expenseController.handleExpense(event, command);
          break;
        
        case 'reminder':
          console.log('‚è∞ ËôïÁêÜÊèêÈÜíÊåá‰ª§');
          response = await this.todoController.handleTodo(event, command, language);
          break;
        
        case 'query_reminders':
          console.log('üìã Êü•Ë©¢ÊèêÈÜíÂàóË°®');
          response = await this.todoController.handleQueryReminders(event, language);
          break;
        
        case 'query_expenses':
          console.log('üí∞ Êü•Ë©¢ÊîØÂá∫Ë®òÈåÑ');
          response = await this.expenseController.handleExpenseQuery(event, command, language);
          break;
        
        case 'delete_reminder':
          console.log('üóëÔ∏è Âà™Èô§ÊèêÈÜí');
          response = await this.todoController.handleDeleteReminder(event, command, language);
          break;
        
        default:
          console.log('‚ùì ËôïÁêÜÈ†êË®≠ÂõûÊáâ');
          response = await this.handleDefault(event, language);
          break;
      }

      console.log('üì§ Ê∫ñÂÇôÂõûÊáâ:', JSON.stringify(response, null, 2));

      // Â¶ÇÊûúÊòØÊ∏¨Ë©¶‰∫ã‰ª∂Ôºå‰∏çË¶ÅÁúüÁöÑÁôºÈÄÅË®äÊÅØ
      if (event.replyToken === 'test-reply-token') {
        console.log('üß™ ÈÄôÊòØÊ∏¨Ë©¶‰∫ã‰ª∂ÔºåË∑≥ÈÅéÂØ¶ÈöõÁôºÈÄÅ');
        return response;
      }

      if (response && event.replyToken) {
        try {
          await this.client.replyMessage(event.replyToken, response);
          console.log('‚úÖ ÊàêÂäüÂÇ≥ÈÄÅÂõûÊáâ');
        } catch (replyError) {
          console.error('‚ùå ÂÇ≥ÈÄÅÂõûÊáâÂ§±Êïó:', replyError);
          console.error('ÂõûÊáâÂÖßÂÆπ:', JSON.stringify(response, null, 2));
        }
        return response;
      }
      
      return null;
      
    } catch (error) {
      console.error('‚ùå ËôïÁêÜ‰∫ã‰ª∂ÊôÇÁôºÁîüÈåØË™§:', error);
      console.error('ÈåØË™§Â†ÜÁñä:', error.stack);
      console.error('‰∫ã‰ª∂ÂÖßÂÆπ:', JSON.stringify(event, null, 2));
      
      // ÂòóË©¶ÂÇ≥ÈÄÅÈåØË™§Ë®äÊÅØ
      if (event.replyToken && event.replyToken !== 'test-reply-token') {
        try {
          const errorMessage = {
            type: 'text',
            text: 'ËôïÁêÜË®äÊÅØÊôÇÁôºÁîüÈåØË™§ÔºåË´ãÁ®çÂæåÂÜçË©¶„ÄÇ'
          };
          
          await this.client.replyMessage(event.replyToken, errorMessage);
          console.log('‚úÖ ÊàêÂäüÂÇ≥ÈÄÅÈåØË™§Ë®äÊÅØ');
        } catch (replyError) {
          console.error('‚ùå ÂÇ≥ÈÄÅÈåØË™§Ë®äÊÅØÂ§±Êïó:', replyError);
        }
      }
      
      throw error; // ÈáçÊñ∞ÊããÂá∫ÈåØË™§‰ª•‰æøË®òÈåÑ
    }
  }

  async handleDefault(event, language) {
    const helpMessage = language === 'ja' ? 
      '„Åì„Çì„Å´„Å°„ÅØÔºÅÂÆ∂Ë®àÁ∞ø„Å®„É™„Éû„Ç§„É≥„ÉÄ„ÉºÊ©üËÉΩ„Çí„ÅîÂà©Áî®„ÅÑ„Åü„Å†„Åë„Åæ„Åô„ÄÇ\n\nüí∞ ÂÆ∂Ë®àÁ∞øÊ©üËÉΩ:\n„ÄåÈ£üË≤ª 500ÂÜÜ ÊòºÈ£ü„Äç\n„Äå‰∫§ÈÄöË≤ª 200ÂÜÜ„Äç\n„ÄåÊîØÂá∫Á¢∫Ë™ç„Äç\n\n‚è∞ „É™„Éû„Ç§„É≥„ÉÄ„ÉºÊ©üËÉΩ:\n„ÄåÊòéÊó•8ÊôÇ„Å´Ëñ¨„ÇíÈ£≤„ÇÄ„Äç\n„ÄåÊØéÊó•19ÊôÇ„Å´ÈÅãÂãï„Äç\n„ÄåÊØéÈÄ±ÊúàÊõúÊó•„Å´‰ºöË≠∞„Äç\n\nüìã ÁÆ°ÁêÜÊ©üËÉΩ:\n„Äå„É™„Éû„Ç§„É≥„ÉÄ„Éº‰∏ÄË¶ß„Äç\n„Äå„É™„Éû„Ç§„É≥„ÉÄ„ÉºÂâäÈô§ [Áï™Âè∑]„Äç' :
      'ÊÇ®Â•ΩÔºÅÊàëÊòØË®òÂ∏≥ÂíåÊèêÈÜíÂä©Êâã„ÄÇ\n\nüí∞ Ë®òÂ∏≥ÂäüËÉΩ:\n„ÄåÈ£üÁâ© 50ÂÖÉ ÂçàÈ§ê„Äç\n„Äå‰∫§ÈÄö 30ÂÖÉ„Äç\n„ÄåÊü•ÁúãÊîØÂá∫„Äç\n\n‚è∞ ÊèêÈÜíÂäüËÉΩ:\n„ÄåÊòéÂ§©8ÈªûÂêÉËó•„Äç\n„ÄåÊØèÂ§©Êôö‰∏ä7ÈªûÈÅãÂãï„Äç\n„ÄåÊØèÈÄ±‰∏ÄÈñãÊúÉ„Äç\n\nüìã ÁÆ°ÁêÜÂäüËÉΩ:\n„ÄåÊü•ÁúãÊèêÈÜí„Äç\n„ÄåÂà™Èô§ÊèêÈÜí [Á∑®Ëôü]„Äç';
    
    return {
      type: 'text',
      text: helpMessage
    };
  }

  startScheduler() {
    try {
      // Ë®≠ÂÆöÊó•Êú¨ÊôÇÈñìÁöÑ cron jobÔºåÊØèÂàÜÈêòÊ™¢Êü•ÊèêÈÜí
      cron.schedule('* * * * *', async () => {
        try {
          const now = moment().tz('Asia/Tokyo');
          console.log(`‚è∞ [${now.format('YYYY-MM-DD HH:mm:ss JST')}] Ê™¢Êü•ÊèêÈÜí‰∏≠...`);
          
          // Â¶ÇÊûúÊúâ reminderSchedulerÔºåÂü∑Ë°åÊ™¢Êü•
          if (this.reminderScheduler && typeof this.reminderScheduler.checkAndSendReminders === 'function') {
            await this.reminderScheduler.checkAndSendReminders();
          } else {
            console.log('‚è∞ ReminderScheduler ‰∏çÂèØÁî®ÔºåË∑≥ÈÅéÊèêÈÜíÊ™¢Êü•');
          }
        } catch (error) {
          console.error('‚ùå ÊéíÁ®ãÂô®ÈåØË™§:', error);
        }
      }, {
        timezone: 'Asia/Tokyo'
      });
      
      console.log('‚è∞ ÊèêÈÜíÊéíÁ®ãÂô®Â∑≤ÂïüÂãï (JST ÊôÇÂçÄ)');
      console.log(`üïê ÁõÆÂâç JST ÊôÇÈñì: ${moment().tz('Asia/Tokyo').format('YYYY-MM-DD HH:mm:ss JST')}`);
    } catch (error) {
      console.error('‚ùå ÊéíÁ®ãÂô®ÂïüÂãïÂ§±Êïó:', error);
    }
  }

  start() {
    this.app.listen(this.port, () => {
      const startTime = moment().tz('Asia/Tokyo');
      console.log('\nüöÄ =================================');
      console.log(`   LINE Bot ‰º∫ÊúçÂô®ÂïüÂãïÊàêÂäü`);
      console.log('üöÄ =================================');
      console.log(`üìç Port: ${this.port}`);
      console.log(`üïê ÂïüÂãïÊôÇÈñì: ${startTime.format('YYYY-MM-DD HH:mm:ss JST')}`);
      console.log(`üåè ÊôÇÂçÄ: Asia/Tokyo (JST, UTC+9)`);
      console.log(`üí∞ Ë®òÂ∏≥ÂäüËÉΩ: ‚úÖ Â∑≤ÂïüÁî® (Ë®òÊÜ∂È´îÂÑ≤Â≠ò)`);
      console.log(`‚è∞ ÊèêÈÜíÂäüËÉΩ: ‚úÖ Â∑≤ÂïüÁî®`);
      console.log(`üåê Â§öË™ûË®ÄÊîØÊè¥: ‚úÖ ÁπÅÈ´î‰∏≠Êñá/Êó•Ë™û`);
      
      console.log('\nüîß Áí∞Â¢ÉËÆäÊï∏ÁãÄÊÖã:');
      console.log(`   CHANNEL_ACCESS_TOKEN: ${process.env.CHANNEL_ACCESS_TOKEN ? '‚úÖ Â∑≤Ë®≠ÂÆö' : '‚ùå Êú™Ë®≠ÂÆö'}`);
      console.log(`   CHANNEL_SECRET: ${process.env.CHANNEL_SECRET ? '‚úÖ Â∑≤Ë®≠ÂÆö' : '‚ùå Êú™Ë®≠ÂÆö'}`);
      console.log(`   GOOGLE_SHEET_ID: ${process.env.GOOGLE_SHEET_ID ? '‚úÖ Â∑≤Ë®≠ÂÆö' : '‚ùå Êú™Ë®≠ÂÆö'}`);
      console.log(`   REMINDERS_SHEET_ID: ${process.env.REMINDERS_SHEET_ID ? '‚úÖ Â∑≤Ë®≠ÂÆö' : '‚ùå Êú™Ë®≠ÂÆö'}`);
      
      console.log('\nüîß ÊéßÂà∂Âô®ÁãÄÊÖã:');
      console.log(`   ExpenseController: ${this.expenseController.constructor.name}`);
      console.log(`   TodoController: ${this.todoController.constructor.name}`);
      console.log(`   CommandParser: ${this.commandParser.constructor.name}`);
      console.log(`   LanguageDetector: ${this.languageDetector.constructor.name}`);
      
      console.log('\n‚úÖ ‰º∫ÊúçÂô®Ê∫ñÂÇôÂ∞±Á∑íÔºåÁ≠âÂæÖË´ãÊ±Ç...\n');
    });
  }
}

// ÂÖ®ÂüüÈåØË™§ËôïÁêÜ
process.on('uncaughtException', (error) => {
  console.error('‚ùå Êú™ÊçïÁç≤ÁöÑ‰æãÂ§ñ:', error);
  console.error('ÊáâÁî®Á®ãÂºèÂ∞áÁπºÁ∫åÈÅãË°å...');
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Êú™ËôïÁêÜÁöÑ Promise ÊãíÁµï:', reason);
  console.error('‰ΩçÁΩÆ:', promise);
});

// ÂïüÂãïÊáâÁî®Á®ãÂºè
const app = new LineBotApp();
app.start();

module.exports = LineBotApp;
